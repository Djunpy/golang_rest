// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    title,
    content,
    category,
    user_id
) VALUES (
     $1, $2, $3, $4
)RETURNING id, title, category, content, created_at, user_id
`

type CreatePostParams struct {
	Title    string           `json:"title"`
	Content  string           `json:"content"`
	Category string `json:"category"`
	UserID   int32            `json:"user_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Category,
		&i.Content,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deletePostStmt, deletePost, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, category, content, created_at, user_id FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.queryRow(ctx, q.getPostByIdStmt, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Category,
		&i.Content,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, category, content, created_at, user_id FROM posts
ORDER BY id
    LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.query(ctx, q.listPostsStmt, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Category,
			&i.Content,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
    title = coalesce($1, title),
    category = coalesce($2, category),
    content = coalesce($3, content)
WHERE id = $4 RETURNING id, title, category, content, created_at, user_id
`

type UpdatePostParams struct {
	Title    sql.NullString   `json:"title"`
	Category sql.NullString `json:"category"`
	Content  sql.NullString   `json:"content"`
	ID       int32            `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost,
		arg.Title,
		arg.Category,
		arg.Content,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Category,
		&i.Content,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
