// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type PostCategory string

const (
	PostCategoryPython     PostCategory = "Python"
	PostCategoryGolang     PostCategory = "Golang"
	PostCategoryJavaScript PostCategory = "JavaScript"
)

func (e *PostCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostCategory(s)
	case string:
		*e = PostCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for PostCategory: %T", src)
	}
	return nil
}

type NullPostCategory struct {
	PostCategory PostCategory
	Valid        bool // Valid is true if PostCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostCategory) Scan(value interface{}) error {
	if value == nil {
		ns.PostCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostCategory), nil
}

type UserRole string

const (
	UserRoleIsActive    UserRole = "is_active"
	UserRoleIsStaff     UserRole = "is_staff"
	UserRoleIsSuperuser UserRole = "is_superuser"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Post struct {
	ID        int32            `json:"id"`
	Title     string           `json:"title"`
	Category  NullPostCategory `json:"category"`
	Content   string           `json:"content"`
	CreatedAt time.Time        `json:"created_at"`
	UserID    int32            `json:"user_id"`
}

type User struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	Email     string       `json:"email"`
	Photo     string       `json:"photo"`
	Verified  sql.NullBool `json:"verified"`
	Password  string       `json:"password"`
	Role      UserRole     `json:"role"`
	CreatedAt time.Time    `json:"created_at"`
}
